import xgboost as xgb
import glob
import os
import pandas as pd
import numpy as np
from sklearn.metrics import explained_variance_score, mean_squared_error, mean_absolute_error, r2_score



def cal_score(y_true, y_pred):
    ev = explained_variance_score(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    r2 = r2_score(y_true, y_pred)
    return ev, mse, mae, rmse, r2


data_train = pd.read_csv(r"D:\2022\1\建模.csv")
data_test = pd.read_csv(r"D:\2022\1\验证.csv")

train_X = data_train.iloc[:, 1:].values
train_Y = data_train.iloc[:, 0].values

test_X = data_test.iloc[:, 1:].values
test_Y = data_test.iloc[:, 0].values

reg_model = {
    'booster': 'gbtree',
    'n_estimators': 60,
    'learning_rate': 0.1,
    'max_depth': 5,  
    'gamma': 2,
    'lambda': 7,
}

reg_model = xgb.XGBRegressor(**reg_model)
reg_model.fit(train_X, train_Y)


ptrain = reg_model.predict(train_X)
TRAIN = pd.concat([pd.DataFrame(train_Y), pd.DataFrame(ptrain)], axis=1)

ea_train, mse_train, mae_train, rmse_train, r2_train = cal_score(train_Y, ptrain)
print("建模精度：", ea_train, mse_train, mae_train, rmse_train, r2_train)

ptest = reg_model.predict(test_X)
TEST = pd.concat([pd.DataFrame(test_Y), pd.DataFrame(ptest)], axis=1)

ea_test, mse_test, mae_test, rmse_test, r2_test = cal_score(test_Y, ptest)
print("预测精度：", ea_test, mse_test, mae_test, rmse_test, r2_test)
print(pd.concat([TRAIN,TEST], axis=0))

Results = pd.concat([TRAIN,TEST], axis=0)

